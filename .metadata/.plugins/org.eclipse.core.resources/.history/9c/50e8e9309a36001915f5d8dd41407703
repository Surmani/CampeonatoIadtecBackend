package com.iadtec.hackathon.shared;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.iadtec.hackathon.shared.querycriteria.CriteriaBuilder;
import com.iadtec.hackathon.shared.querycriteria.SpecificationsBuilder;

import br.com.iadtec.checklist.config.TenancyMonitor;

@TenancyMonitor
public abstract class BasicController <
T extends BasicEntity, 
R extends BasicRepository<T>,
S extends BasicService<T, R>> {
	
	private static final String ORDERBYPADRAO = "dataCriacao";
	
	@Autowired
	protected S service;

	@GetMapping
	public ResponseEntity<List<T>> findAll() {
		List<T> objs = service.findAll();

		if (!objs.isEmpty()) {
			return ResponseEntity.ok().body(objs);
		}

		return ResponseEntity.noContent().build();
	}

	@GetMapping("/{id}")
	public ResponseEntity<Optional<T>> findById(@PathVariable Long id) {
		Optional<T> obj = service.findOne(id);

		if (obj.isPresent()) {
			return ResponseEntity.ok().body(obj);
		}

		return ResponseEntity.noContent().build();
	}

	@PostMapping
	public ResponseEntity<T> insert(@RequestBody T obj) {
		T saved = service.save(obj);
		return ResponseEntity.status(HttpStatus.CREATED).body(saved);
	}

	@PutMapping
	public ResponseEntity<T> update(@RequestBody T recurso) {
		T updted = this.service.update(recurso);
		return ResponseEntity.ok().body(updted);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> delete(@PathVariable Long id) {
		service.delete(id);
		return ResponseEntity.ok().build();
	}
	
	@GetMapping(params = { "page", "pageSize" })
	public ResponseEntity<Page<T>> findPaginator(@RequestParam(value = "page") int page,
			@RequestParam(value = "pageSize") int pageSize,
			@RequestParam(value = "orderBy") Optional<String> maybeOrderBy,
			@RequestParam(value = "asc") Optional<Boolean> maybeAscending) {

		String orderBy = maybeOrderBy.orElse(ORDERBYPADRAO);
		boolean ascending = maybeAscending.orElse(true);
		
		Page<T> objs = service.findAllPagination(page, pageSize, ascending, orderBy);

		return ResponseEntity.ok(objs);
	}
	
	@GetMapping(path = {"search"})
	public Page<T> search(
			@RequestParam(value = "search") Optional<String> search,
			@Qualifier("page") Pageable pageable
			) {
		
		SpecificationsBuilder<T> builder = new SpecificationsBuilder<>();

		if(search.isPresent()) {
			List<String> criterios = new CriteriaBuilder(search.get(), this.getType()).build();

			for (String criterio : criterios) {
				String[] split = criterio.split(":");
				builder.with(split[0], ":", split[1]);
			}
		}

        Specification<T> spec = builder.build();
        return service.findAll(spec, pageable);
	}
	
	protected Class<?> getType() {
		Type genericSuperclass = getClass().getGenericSuperclass();
		ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass;
		return (Class<?>) parameterizedType.getActualTypeArguments()[0];
	}
	
	
}