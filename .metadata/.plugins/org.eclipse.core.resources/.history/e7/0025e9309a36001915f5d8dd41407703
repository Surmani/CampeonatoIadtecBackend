package com.iadtec.hackathon.shared.querycriteria;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.jpa.domain.Specification;

import br.com.iadtec.checklist.shared.BasicEntity;

class BasicSpecification <T extends BasicEntity> implements Specification<T> {
	
	private static final long serialVersionUID = 1L;

	private SearchCriteria criteria;

	public BasicSpecification(SearchCriteria param) {
		this.criteria = param;
	}

	@Override
	public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
		if (criteria.getOperation().equalsIgnoreCase(">")) {
            return builder.greaterThanOrEqualTo(
              root.<String> get(criteria.getKey()), criteria.getValue().toString());
        } 
        else if (criteria.getOperation().equalsIgnoreCase("<")) {
            return builder.lessThanOrEqualTo(
              root.<String> get(criteria.getKey()), criteria.getValue().toString());
        } 
        else if (criteria.getOperation().equalsIgnoreCase(":")) {
        	
        	CriteriaMapType mapType = CriteriaMapType.fromType(root.get(criteria.getKey()).getJavaType());
        	if(mapType == null)
        		return null;
        	
        	return mapType.getConverter().buildCriteria(criteria, root, builder);
        }
        return null;
	}

}
